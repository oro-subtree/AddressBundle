{% block oro_region_widget %}
    {# // check if block was not included yet #}
    {% set _block = block('oro_region_updater_js') %}
    {% if (_block is empty) %}
        {% include 'OroAddressBundle:Include:javascript.html.twig' %}
        {{ block('oro_region_updater_js')|raw }}
    {% endif %}

    {% if country_field is not defined or country_field is empty %}
        {% set country_field = "#" ~ id|replace({'_state': '_country'}) %}
    {% endif %}

    {% if state_text_field is not defined or state_text_field is empty %}
        {% set state_text_field = "#" ~ id ~ "_text" %}
    {% endif %}

    {{ form_widget(form) }}

    <script type="text/javascript">
        require(['jquery', 'oro/region/view', 'oro/region/collection'],
        function($, RegionView, RegionCollection){
            $(function() {
                /** @type oro.region.View */
                new RegionView({
                    el: $('{{ country_field }}'),
                    target: $('#{{ id }}'),
                    simpleEl: $('{{ state_text_field }}'),
                    collection: new RegionCollection(),
                    showSelect: {{ (choices is not empty)|json_encode }}
                });
            });
        });
    </script>

    <style type="text/css">
        {% if choices %}
            #{{ id }} {
                display: block;
            }

            {{ state_text_field }} {
                display: none;
            }
        {% else %}
            #{{ id }} {
                display: none;
            }

            {{ state_text_field }} {
                display: block;
            }
        {% endif %}
    </style>
{% endblock oro_region_widget %}

{% block oro_email_widget %}
    <div class="email-holder {% if form.email.vars.errors|length > 0 %} validation-error{% endif %}">
        <div class="input-append collection-element-primary">
            {{ form_widget(form.email) }}
            <label class="add-on" title="{{ 'Primary'|trans }}">
                {{ form_widget(form.primary) }}
            </label>
        </div>
        {{ form_errors(form.email) }}
    </div>
    {{ form_rest(form) }}
{%  endblock %}

{% block oro_phone_widget %}
    <div class="email-holder {% if form.phone.vars.errors|length > 0 %} validation-error{% endif %}">
        <div class="input-append collection-element-primary">
            {{ form_widget(form.phone) }}
            <label class="add-on" title="{{ 'Primary'|trans }}">
                {{ form_widget(form.primary) }}
            </label>
        </div>
        {{ form_errors(form.phone) }}
    </div>
    {{ form_rest(form) }}
{%  endblock %}

{% block oro_address_widget %}
    {{ form_errors(form) }}
    {{ form_row(form.id) }}
    {{ form_row(form.label) }}
    {{ form_row(form.namePrefix) }}
    {{ form_row(form.firstName) }}
    {{ form_row(form.middleName) }}
    {{ form_row(form.lastName) }}
    {{ form_row(form.nameSuffix) }}
    {{ form_row(form.organization) }}
    {{ form_row(form.country) }}
    {{ form_row(form.street) }}
    {{ form_row(form.street2) }}
    {{ form_row(form.city) }}
    {{ form_row(form.state_text) }}
    {{ form_row(form.state) }}
    {{ form_row(form.postalCode) }}
    {{ form_rest(form) }}
{%  endblock %}

{% block oro_typed_address_widget %}
    {{ form_row(form.types) }}
    {{ form_row(form.primary) }}
    {{ block('oro_address_widget') }}
{%  endblock %}

{% macro oro_collection_item_prototype(widget) %}
    {% if 'prototype' in widget.vars|keys %}
        {% set form = widget.vars.prototype %}
        {% set name = widget.vars.prototype.vars.name %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.vars.full_name %}
    {% endif %}
    <div data-content="{{ name }}">
        <div class="row-oro oro-multiselect-holder">
            {{ form_widget(form) }}
            <button class="removeRow btn btn-action btn-link" type="button" data-related="{{ name }}">Ã—</button>
        </div>
    </div>
{% endmacro %}

{% block oro_item_collection_widget %}
    {% spaceless %}
        {% set prototypeHtml = _self.oro_collection_item_prototype(form) %}
        {% set attr = attr|merge({'class': (attr.class is defined ? attr.class ~ ' ' : '') ~ 'oro-item-collection collection-fields-list' }) %}
        {% set id = id ~ '_collection' %}
        <div class="row-oro">
            <div {{ block('widget_container_attributes') }} data-prototype="{{ prototypeHtml|escape }}">
                {% if form.children|length %}
                    {% for child in form.children %}
                        {{ _self.oro_collection_item_prototype(child) }}
                    {% endfor %}
                {% elseif show_form_when_empty %}
                    {{ prototypeHtml|replace({'__name__': '0'})|raw }}
                {% endif %}
            </div>
            <a class="btn add-list-item" href="javascript: void(0);"><i class="icon-plus"></i>{{ 'Add'|trans }}</a>
        </div>
        {{ _self.oro_item_collection_validate_primary_js(_context) }}
    {% endspaceless %}
{% endblock %}

{% macro oro_item_collection_validate_primary_js(context) %}
    {% set form = context.form %}
    {% set show_form_when_empty = context.show_form_when_empty %}
    {% set id = context.id %}
    {% set has_primary = form.vars.prototype.primary is defined %}
    {% set has_types = form.vars.prototype.types is defined %}
    {% if has_primary or has_types or show_form_when_empty %}
        <script type="text/javascript">
            require(['jquery'],
            function($){
                $(function() {
                    var container = $('#{{ id }}');

                {% if has_primary %}
                    /**
                     * Allow only 1 primary checkbox to be checked.
                     * This logic convert checkbox logic to logic used in radiobutton
                     */
                    container.on('click', '[name$="[primary]"]', function() {
                        container.find('[name$="[primary]"]').each(function (idx, el) {
                            el.checked = false;
                        });
                        this.checked = true;
                    });
                {% endif %}

                {% if has_types %}
                    /**
                     * Allow only 1 item with selected type
                     */
                    container.on('click', '[name$="[types][]"]', function() {
                        if (this.checked) {
                            container.find('[name$="[types][]"][value="' + this.value + '"]').each(function (idx, el) {
                                el.checked = false;
                            });
                            this.checked = true;
                        }
                    });
                {% endif %}
                });
            });
        </script>
    {% endif %}
{% endmacro %}
